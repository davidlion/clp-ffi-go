version: "3"

includes:
  # lint: "lint-tasks.yml"
  utils: "tools/yscope-dev-utils/taskfiles/utils.yml"

vars:
  G_BUILD_DIR: "{{.TASKFILE_DIR}}/build"
  G_DEPS_DIR: "{{.G_BUILD_DIR}}/deps"
  G_INSTALL_DIR: "{{.TASKFILE_DIR}}"
  G_LINT_VENV_DIR: "{{.G_BUILD_DIR}}/lint-venv"
  G_CLP_SRC_DIR: "{{.G_DEPS_DIR}}/clp"
  G_JSON_SRC_DIR: "{{.G_DEPS_DIR}}/json"
  G_MSGPACK_SRC_DIR: "{{.G_DEPS_DIR}}/msgpack"
  G_OUTCOME_SRC_DIR: "{{.G_DEPS_DIR}}/outcome"

tasks:
  bazel:
    # deps:
    #   - "install-deps-bazel"
    cmds:
      - "bazel build //..."

  build:
    deps:
      - "install-deps-cpp"
      - "install-deps-go"
    cmds:
      - task: "build-cpp"
      - task: "build-go"

  build-cpp:
    vars:
      BUILD_TYPE: "Release"
      BUILD_DIR: "{{.G_BUILD_DIR}}/{{.BUILD_TYPE}}"
    deps:
      - "install-deps-cpp"
    cmds:
      - task: "cmake_build"
        vars:
          SRC_DIR: "{{.TASKFILE_DIR}}/cpp"
          BUILD_DIR: "{{.BUILD_DIR}}"
          CMAKE_ARGS: >-
            -DCMAKE_BUILD_TYPE="{{.BUILD_TYPE}}"
            -DOS_SUFFIX="{{OS}}"
            -DARCH_SUFFIX="{{ARCH}}"
            # -Dnlohmann_json_ROOT="{{.G_JSON_SRC_DIR}}-install"
            # -Dnlohmann_json_DIR="{{.G_JSON_SRC_DIR}}-install/share/cmake/nlohmann_json"
            -Dmsgpack-cxx_ROOT="{{.G_MSGPACK_SRC_DIR}}-install"
            -Dclp_SOURCE_DIR="{{.G_CLP_SRC_DIR}}"
            -Doutcome_SOURCE_DIR="{{.G_OUTCOME_SRC_DIR}}"
      - task: "cmake_install"
        vars:
          SRC_DIR: "{{.SRC_DIR}}"
          BUILD_DIR: "{{.BUILD_DIR}}"
          INSTALL_DIR: "{{.G_INSTALL_DIR}}"

  build-go:
    deps:
      - "install-deps-go"
    cmds:
      - "go generate ./..."
      - "go build ./..."

  clean:
    cmds:
      - |
        rm ./lib/*
        rm ./**/*_string.go
        rm -r cpp/build
        go clean -cache

  install-deps-cpp:
    deps:
      - "install-deps-cpp-clp"
      - "install-deps-cpp-json"
      - "install-deps-cpp-msgpack"
      - "install-deps-cpp-outcome"

  install-deps-cpp-clp:
    vars:
      DIR: "{{.G_DEPS_DIR}}"
      SRC_DIR: "{{.DIR}}/clp"
    dir: "{{.DIR}}"
    cmds:
      - task: "fetch_src"
        vars:
          OUTPUT_DIR: "{{.SRC_DIR}}"
          URL: "https://github.com/y-scope/clp/archive/54962a0708daa443c9bdfb3462ed464b65b62886.tar.gz"
          URL_SHA256: "67e19782b2b5a076e30f5025ec05b9db63f19bb07702418476776e6a995a79bb"

  install-deps-cpp-json:
    vars:
      DIR: "{{.G_DEPS_DIR}}"
      SRC_DIR: "{{.DIR}}/json"
    dir: "{{.DIR}}"
    cmds:
      - task: "fetch_src"
        vars:
          OUTPUT_DIR: "{{.SRC_DIR}}"
          URL: "https://github.com/nlohmann/json/archive/v3.11.3.tar.gz"
          URL_SHA256: "0d8ef5af7f9794e3263480193c491549b2ba6cc74bb018906202ada498a79406"
      - task: "cmake_build"
        vars:
          SRC_DIR: "{{.SRC_DIR}}"
          CMAKE_ARGS: "-DJSON_BuildTests=OFF"
      - task: "cmake_install"
        vars:
          SRC_DIR: "{{.SRC_DIR}}"

  install-deps-cpp-msgpack:
    vars:
      DIR: "{{.G_DEPS_DIR}}"
      SRC_DIR: "{{.DIR}}/msgpack"
    dir: "{{.DIR}}"
    cmds:
      - task: "fetch_src"
        vars:
          OUTPUT_DIR: "{{.SRC_DIR}}"
          URL: "https://github.com/msgpack/msgpack-c/archive/cpp-6.1.0.tar.gz"
          URL_SHA256: "5e63e4d9b12ab528fccf197f7e6908031039b1fc89cd8da0e97fbcbf5a6c6d3a"
      - task: "cmake_build"
        vars:
          SRC_DIR: "{{.SRC_DIR}}"
          CMAKE_ARGS: >-
            "-DMSGPACK_CXX20=ON"
            "-DMSGPACK_USE_BOOST=OFF"
      - task: "cmake_install"
        vars:
          SRC_DIR: "{{.SRC_DIR}}"

  install-deps-cpp-outcome:
    vars:
      DIR: "{{.G_DEPS_DIR}}"
      SRC_DIR: "{{.DIR}}/outcome"
    dir: "{{.DIR}}"
    cmds:
      - "mkdir -p {{.SRC_DIR}}/single-header"
      - task: "curl"
        vars:
          OUTPUT_FILE: "{{.SRC_DIR}}/single-header/outcome.hpp"
          URL: "https://github.com/ned14/outcome/raw/v2.2.10/single-header/outcome.hpp"
          URL_SHA256: "eb85647590db22a4b0cab5a43bfe812d57534777eeafb8b9198d065b02085861"

  install-deps-go:
    cmds:
      - "go install golang.org/x/tools/cmd/stringer@latest"

  # lint:
  #   deps:
  #     - "lint-cpp"
  #     - "lint-go"
  #     - "lint-yml"

  # lint-cpp:
  #   deps: ["lint-venv-cpp"]
  #   # cmds:
  #   #   - clang-tidy

  # lint-go:
  #   # deps: ["venv"]
  #   cmds:
  #     # curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh |
  #     # sh -s -- -b $(go env GOPATH)/bin v1.59.0
  #     - |
  #       golangci-lint run

  # lint-yml:
  #   # deps: ["venv"]
  #   cmds:
  #     - |-
  #       # . "{{.G_LINT_VENV_DIR}}/bin/activate"
  #       yamllint --strict \
  #         .github \
  #         .golangci.yml \
  #         .yamllint.yml \
  #         cpp/.clang-format \
  #         cpp/.clang-tidy \
  #         taskfile.yml

  test:
    deps:
      - "test-bazel"
      - "test-go"

  test-go:
    deps: [build-go]

  test-baze:
    cmds:
      - bazel test //ir:ir_test


## MOVE TO UTILS

  cmake_build:
    internal: true
    vars:
      BUILD_DIR: "{{default (printf \"%s-build\" .SRC_DIR) .BUILD_DIR}}"
      CHECKSUM_FILE: "{{default (printf \"%s.md5\" .BUILD_DIR) .CHECKSUM_FILE}}"
      CMAKE_ARGS: "{{default nil .CMAKE_ARGS}}"
    requires:
      vars: ["SRC_DIR"]
    sources: ["{{.SRC_DIR}}/**/*"]
    generates: ["{{.CHECKSUM_FILE}}"]
    deps:
      - task: "utils:validate-checksum"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          DATA_DIR: "{{.BUILD_DIR}}"
    cmds:
      - >-
        cmake
        -S "{{.SRC_DIR}}"
        -B "{{.BUILD_DIR}}"
        "{{.CMAKE_ARGS}}"
      - >-
        cmake
        --build "{{.BUILD_DIR}}"
        --parallel
      # This command must be last
      - task: "utils:compute-checksum"
        vars:
          DATA_DIR: "{{.BUILD_DIR}}"
          OUTPUT_FILE: "{{.CHECKSUM_FILE}}"

  cmake_install:
    internal: true
    vars:
      BUILD_DIR: "{{default (printf \"%s-build\" .SRC_DIR) .BUILD_DIR}}"
      INSTALL_DIR: "{{default (printf \"%s-install\" .SRC_DIR) .INSTALL_DIR}}"
      CHECKSUM_FILE: "{{default (printf \"%s.md5\" .INSTALL_DIR) .CHECKSUM_FILE}}"
    requires:
      vars: ["SRC_DIR"]
    sources: ["{{.BUILD_DIR}}/**/*", "{{.SRC_DIR}}/**/*"]
    generates: ["{{.CHECKSUM_FILE}}"]
    deps:
      - task: "utils:validate-checksum"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          DATA_DIR: "{{.INSTALL_DIR}}"
    cmds:
      - >-
        cmake
        --install "{{.BUILD_DIR}}"
        --prefix "{{.INSTALL_DIR}}"
      # This command must be last
      - task: "utils:compute-checksum"
        vars:
          DATA_DIR: "{{.INSTALL_DIR}}"
          OUTPUT_FILE: "{{.CHECKSUM_FILE}}"

  curl:
    internal: true
    vars:
      OUTPUT_FILE: "{{default (base .URL) .OUTPUT_FILE}}"
    requires:
      vars: ["URL", "URL_SHA256"]
    generates:
      - "{{.OUTPUT_FILE}}"
    status:
      - echo "{{.URL_SHA256}}"
      - diff
        <(echo "{{.URL_SHA256}}")
        <(openssl dgst -sha256 "{{.OUTPUT_FILE}}"
        | awk '{print $2}')
    cmds:
      - curl -L "{{.URL}}" -o "{{.OUTPUT_FILE}}"

  # @param {string} OUTPUT_DIR
  # @param {string} URL
  # @param {string} URL_SHA256
  fetch_src:
    internal: true
    vars:
      CHECKSUM_FILE: "{{default (printf \"%s.md5\" .OUTPUT_DIR) .CHECKSUM_FILE}}"
      DIR: "{{dir .OUTPUT_DIR}}"
      STRIP: "{{default 1 .STRIP}}"
      TAR_FILE: "{{default (printf \"%s.tar.gz\" .OUTPUT_DIR) .TAR_FILE}}"
    requires:
      vars: ["OUTPUT_DIR", "URL", "URL_SHA256"]
    dir: "{{.DIR}}"
    sources: ["{{.TASKFILE}}"]
    generates: ["{{.CHECKSUM_FILE}}", "{{.TAR_FILE}}"]
    deps:
      - task: "curl"
        vars:
          URL: "{{.URL}}"
          URL_SHA256: "{{.URL_SHA256}}"
          OUTPUT_FILE: "{{.TAR_FILE}}"
      - task: "utils:validate-checksum"
        vars:
          CHECKSUM_FILE: "{{.CHECKSUM_FILE}}"
          DATA_DIR: "{{.OUTPUT_DIR}}"
    cmds:
      - |-
        rm -rf "{{.OUTPUT_DIR}}"
        mkdir "{{.OUTPUT_DIR}}"
        tar -x --strip-components="{{.STRIP}}" -C "{{.OUTPUT_DIR}}" -f "{{.TAR_FILE}}"
      # This command must be last
      - task: "utils:compute-checksum"
        vars:
          DATA_DIR: "{{.OUTPUT_DIR}}"
          OUTPUT_FILE: "{{.CHECKSUM_FILE}}"
